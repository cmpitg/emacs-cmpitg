#!/usr/bin/env tclsh

# TODO: Remove beginWriting & endWriting
# TODO: listToSexp

package require Tcl 8
package require Tclx 8
package require fileutil 1.15

##############################################################################
# Helpers
##############################################################################

proc fileAppend {path content} {
    set fd [open $path a]
    puts -nonewline $fd $content
    close $fd
}

proc rmacsEval {cmd} {
    return [exec rmacs --name $::RMACS_SERVER_NAME eval $cmd]
}

proc writeToRmacsRepeatedly {} {
    # TODO debug mode
    # puts "$filepath: [exec cat $filepath]"
    # flush stdout

    # Only write if file is not empty
    if {[file exists $::TEMP_PATH] && [file size $::TEMP_PATH] > 0} {
        rmacsEval "
          (with-current-buffer $::RMACS_BUFFER
            (save-excursion
              (goto-char $::LOCAL_TEE_MARK_VAR)
              (~insert-file-contents-and-goto-end \"$::TEMP_PATH\")
              (setq-local $::LOCAL_TEE_MARK_VAR (point-marker))
              (~write-to-file \"$::TEMP_PATH\" \"\")))"
    }

    if {[info exists ::NO_NEW_INPUT] && $::NO_NEW_INPUT} {
        endWriting
    } else {
        after $::WRITE_INTERVAL_MS [list writeToRmacsRepeatedly]
    }
}

proc beginWriting {} {
    rmacsEval "
      (with-current-buffer $::RMACS_BUFFER
        (save-excursion
          (goto-char $::RMACS_CURRENT_POINT)
          (insert *~output-beginning-marker* \"\\n\")
          (setq-local $::LOCAL_TEE_MARK_VAR (point-marker))
          (insert \"\\n\" *~output-end-marker*)))"
}

proc endWriting {} {
    file delete $::TEMP_PATH
}

proc readAndSaveInputRepeatedly {chan readSizeInChars} {
    if {$::INPUT_MODE eq "line"} {
        if {[gets $chan input] > 0} {
            puts "$input"
            flush stdout

            fileAppend $::TEMP_PATH "$input\n"
        }
    } else {
        set input [read $chan $readSizeInChars]

        if {$input ne ""} {
            puts -nonewline "$input"
            flush stdout

            fileAppend $::TEMP_PATH $input
        }
    }

    if {[eof $chan]} {
        # No more new input coming
        set ::NO_NEW_INPUT 1
        return
    }

    after $::READ_INTERVAL_MS [list readAndSaveInputRepeatedly stdin $readSizeInChars]
}

##############################################################################
# Setup
##############################################################################

fconfigure stdin -blocking 0 -buffering none

if {[info exists ::env(RMACS_TEE_INPUT_MODE)]} {
    set ::INPUT_MODE $::env(RMACS_TEE_INPUT_MODE)
} else {
    set ::INPUT_MODE chars
}

if {[info exists ::env(RMACS_TEE_READ_INTERVAL_MS)]} {
    set ::READ_INTERVAL_MS $::env(RMACS_TEE_READ_INTERVAL_MS)
} else {
    set ::READ_INTERVAL_MS 100
}

if {[info exists ::env(RMACS_TEE_WRITE_INTERVAL_MS)]} {
    set ::WRITE_INTERVAL_MS $::env(RMACS_TEE_WRITE_INTERVAL_MS)
} else {
    set ::WRITE_INTERVAL_MS 100
}

if {[info exists ::env(RMACS_TEE_READ_BUFFER_SIZE)]} {
    set ::READ_SIZE $::env(RMACS_TEE_READ_BUFFER_SIZE)
} else {
    set ::READ_SIZE 4096
}
if {$::READ_SIZE <= 0} {
    error "RMACS_TEE_READ_BUFFER_SIZE must be a positive integer"
}

if {[info exists ::env(RMACS_SERVER_NAME)]} {
    set ::RMACS_SERVER_NAME $::env(RMACS_SERVER_NAME)
} else {
    set ::RMACS_SERVER_NAME edit
}

if {[info exists ::env(RMACS_BUFFER_NAME)]} {
    set ::RMACS_BUFFER $::env(RMACS_BUFFER_NAME)
} else {
    set ::RMACS_BUFFER [rmacsEval {(buffer-name (current-buffer))}]
}

# Make sure the buffer exists
rmacsEval "(get-buffer-create $::RMACS_BUFFER)"

if {[info exists ::env(RMACS_CURRENT_POINT)]} {
    set ::RMACS_CURRENT_POINT $::env(RMACS_CURRENT_POINT)
} else {
    set ::RMACS_CURRENT_POINT [rmacsEval "(with-current-buffer $::RMACS_BUFFER (point))"]
}

# Rmacs local variable to save the end position of the current command output
set ::LOCAL_TEE_MARK_VAR "local/rmacs-tee-marker_[exec gen-filename]"

# Temp file, used to insert content to Rmacs buffer
set ::TEMP_PATH [::fileutil::tempfile]

# If the process dies, write what's left from temp file
signal -restart trap {SIGINT SIGHUP} {
    set ::NO_NEW_INPUT 1
    writeToRmacsRepeatedly
    exit 0
}

##############################################################################

beginWriting
after 0 [list readAndSaveInputRepeatedly stdin $::READ_SIZE]
after 0 [list writeToRmacsRepeatedly]
vwait ::NO_NEW_INPUT

# Last call, try to see if there's any input left
writeToRmacsRepeatedly
