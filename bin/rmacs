#!/bin/bash

export GPG_TTY=$(tty)

if [[ "${1}" = "--help" ]]; then
	cat <<EOF
Usage: rmacs [rmacs-options] <command> [options] [arguments] ...

Rmacs is a Re-enforced eMacs.

By default, Rmacs with load 'init.el' in directory '../src/' (following the
symlink).  This file is Rmacs's base init file and its path could be
customized by pointing the environment variable BASE_INIT to the corresponding
location.

'command' denotes the main functionality of how Rmacs is used.  'command' is
one of the following:

  edit   :: Text editor
  mail   :: Mail browser
  notes  :: Note taker
  file   :: File manager
  eval   :: Evals an Emacs Lisp expression instead of starting application

One or more Rmacs options might be specificied:

  --port <port-number>  :: An HTTP port number on which the Emacs server is
                           listened.
  --base-init <path>    :: The main Emacs Lisp init file.
  --init <path>         :: An additional Emacs Lisp init file.
  --verbose             :: Prints command, options, and arguments.

If '--port' is not specified, by default,
  text editor uses port 9999
  mail browser uses port 9998
  note taker uses port 9997
  file taker uses port 9996

Possible options for edit:

  --new-frame   :: Create a new frame.

Examples:

  rmacs edit <path>
    Opens a file.

  rmacs edit <path>:<line-number>
    Opens a file, jumps to a specific line.

  rmacs edit <path>:/<pattern>/
    Opens a file, jumps to the first line containing a specific pattern.

  rmacs mail
    Opens mail browser.

  rmacs notes
    Opens note utility.

  rmacs file
    Opens file browser.

  rmacs eval <expression>
    Evals an Emacs Lisp expression.
EOF
	exit 0
fi

##############################################################################
# Reading commands and arguments
##############################################################################

command_=""
port_=""
base_init_="${BASE_INIT:-$(dirname $(readlink -f $0))/../src/init.el}"
init_=""
verbose_="0"
tmpdir_="${TMPDIR:-/tmp/${USER}}"

while [[ "${1}" == --* ]]; do
	case "${1}" in
		--port)
			port_="${2}"
			shift
			;;
		--init)
			init_="${2}"
			shift
			;;
		--base-init)
			base_init_="${2}"
			shift
			;;
		--verbose)
			verbose_=1
			;;
		*)
			echo Invalid options "${1}". >&2
			exit 2
	esac
	shift
done

case "${1}" in
	edit|eval)
		command_="${1}"
		port_=${port_:-9999}
		;;
	mail)
		command_=mail
		port_=${port_:-9998}
		;;
	notes)
		command_=notes
		port_=${port_:-9997}
		;;
	file)
		command_=file
		port_=${port_:-9996}
		;;
	"")
		echo Missing command.  See Remacs --help for usage. >&2
		exit 1
		;;
	*)
		echo Invalid command "${1}". >&2
		exit 1
		;;
esac
shift

if [[ "${verbose_}" = "1" ]]; then
	echo Command: ${command_}
	echo Port: ${port_}
	echo Base init: ${base_init_}
	if ! [[ "${init_}" = "" ]]; then
		echo Init: ${init_}
	fi
fi

##############################################################################
# Helpers
##############################################################################

server_running_p() {
	(curl 0:${1} &>/dev/null) && echo 1 || echo 0
}

wait_until_port_open() {
	while [[ $(server_running_p ${1}) = "0" ]]; do
		sleep 1
	done
}

##############################################################################
# Main
##############################################################################

if [[ $(server_running_p ${port_}) = "0" ]]; then
	case "${command_}" in
		mail)
			export EMACS_ENABLED_MAIL=1
			;;
		notes)
			export EMACS_ENABLED_NOTES=1
			;;
		file)
			export EMACS_ENABLED_FILE_BROWSER=1
			;;
	esac

	export EMACS_PORT=${port_}

	# Start the server
	if [[ "${init_}" = "" ]]; then
		nohup emacs -Q \
			--load "${base_init_}" \
			>"${tmpdir_}/emacs-${port_}.out" \
			2>"${tmpdir_}/emacs-${port_}.err" &
	else
		nohup emacs -Q \
			--load "${base_init_}" \
			--load "${init_}" \
			>"${tmpdir_}/emacs-${port_}" \
			2>"${tmpdir_}/emacs-${port_}.err" &
	fi
fi

wait_until_port_open "${port_}"

case "${command_}" in
	eval)
		if [[ "${1}" = "" ]]; then
			echo No expression to eval. >&2
			exit 1
		fi

		curl "0:${port_}/eval/" -d "$@"
		;;
	edit)
		new_frame_="false"
		case "${1}" in
			--new-frame)
				new_frame_="true"
				shift
				;;
		esac

		if [[ "${1}" == /* ]]; then
			path_="$@"
		elif ! [[ "${1}" = "" ]]; then
			path_="${PWD}/$@"
		fi

		if [[ "${new_frame_}" == "true" ]]; then
			curl "0:${port_}/open/${path_}?new-frame=true"
		else
			curl "0:${port_}/open/${path_}"
		fi
		;;
	file)
		# TODO: Open file with file browser
		;;
esac
