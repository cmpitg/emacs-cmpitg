# -*- mode: snippet -*-
# name: boot-init - Init build.boot
# key: ;boot-init
# --
(ns boot.user)

(def ^:const +project+ {:project '$1
                        :version "${2:0.0.1-SNAPSHOT}"})

(task-options! pom +project+
               aot {:all true}
               jar {:main '$3})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Utils
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn read-deps-edn
  "Reads tools.deps's deps.edn."
  [aliases-to-include]
  (let [{:keys [paths deps aliases]}
        (-> "deps.edn" slurp clojure.edn/read-string)
        deps (->> (select-keys aliases aliases-to-include)
                  vals
                  (mapcat :extra-deps)
                  (into deps)
                  (reduce
                   (fn [deps [artifact info]]
                     (if-let [version (:mvn/version info)]
                       (conj deps
                             (transduce cat conj [artifact version]
                                        (select-keys info [:scope :exclusions])))
                       deps))
                   []))]
    {:dependencies   deps
     :source-paths   (set paths)
     :resource-paths (set paths)}))

(defn set-env-from-deps-edn!
  "Sets all necessary environment definitions."
  [aliases-to-include]
  (doseq [[env val] (read-deps-edn aliases-to-include)]
    (set-env! env val)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Tasks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftask build-uberjar
  "Builds an uberjar"
  []
  (comp (pom) (aot) (uber) (jar) (target)))

(deftask build-native-image
  "Builds a native image."
  []
  (dosh "native-image"
        "--report-unsupported-elements-at-runtime"
        "--initialize-at-build-time"
        "--static"
        "-jar" (format "target/%s-%s.jar"
                       (:project +project+)
                       (:version +project+))
        (format "-H:Name=target/%s-%s"
                (:project +project+)
                (:version +project+)))
  identity)

(deftask dev
  "Adds dev-only deps."
  []
  (set-env-from-deps-edn! [:dev])
  identity)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(set-env-from-deps-edn! [])
